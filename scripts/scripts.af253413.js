"use strict";angular.module("gameAppOneApp",["ngAnimate","ngAria","ngCookies","ngMessages","ngResource","ngRoute","ngSanitize","ngTouch"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main",activeTab:"main"}).when("/about",{templateUrl:"views/about.html",controller:"AboutCtrl",controllerAs:"about",activeTab:"about"}).otherwise({redirectTo:"/"})}]),angular.module("gameAppOneApp").controller("MainCtrl",["$scope",function(a){a.characterName="Beorn",a.characterType="Bear Walker",a.health=3,a.attack=9,a.defense=7,a.agility=11,a.craft=5,a.morale=2,a.setActiveItem=function(a){var b=this.activeItem;console.log(b)},a.addOne=function(b){"health"===b?a.health=a.health+1:"attack"===b?a.attack=a.attack+1:"defense"===b?a.defense=a.defense+1:"agility"===b?a.agility=a.agility+1:"craft"===b?a.craft=a.craft+1:"morale"===b&&(a.morale=a.morale+1)},a.subtractOne=function(b){"health"===b?a.health=a.health-1:"attack"===b?a.attack=a.attack-1:"defense"===b?a.defense=a.defense-1:"agility"===b?a.agility=a.agility-1:"craft"===b?a.craft=a.craft-1:"morale"===b&&(a.morale=a.morale-1)}}]),angular.module("gameAppOneApp").controller("AboutCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("gameAppOneApp").controller("NavCtrl",["$scope","$route",function(a,b){a.$route=b}]),angular.module("gameAppOneApp").run(["$templateCache",function(a){a.put("views/about.html",'<div class="row marketing"> <h3>Skinwalkers: Character App</h3> <p><em>Skinwalkers</em> is the working title of a new boardgame design by Taran Kratz. The game will include web application integration, the first iteration of which is represented by this mock up. The mock up was designed by Luke Green and built with the technologies listed below.</p> <h4>HTML5 Boilerplate</h4> <p> HTML5 Boilerplate is a professional front-end template for building fast, robust, and adaptable web apps or sites. </p> <h4>Angular</h4> <p> AngularJS is a toolset for building the framework most suited to your application development. </p> <h4>Karma</h4> <p>Spectacular Test Runner for JavaScript.</p> </div>'),a.put("views/main.html",'<div class="jumbotron" ng-controller="MainCtrl"> <div> <h2 ng-bind="characterName"></h2> <h3 ng-bind="characterType"></h3> <ul class="list-group"> <li class="list-group-item" ng-class="{active: activeItem === \'health\'}" ng-click="activeItem = \'health\' ; setActiveItem($event)"> <span class="badge" ng-bind="health"></span> Health </li> <li class="list-group-item" ng-class="{active: activeItem === \'attack\'}" ng-click="activeItem = \'attack\' ; setActiveItem($event)"> <span class="badge" ng-bind="attack"></span> Attack </li> <li class="list-group-item" ng-class="{active: activeItem === \'defense\'}" ng-click="activeItem = \'defense\' ; setActiveItem($event)"> <span class="badge" ng-bind="defense"></span> Defense </li> <li class="list-group-item" ng-class="{active: activeItem === \'agility\'}" ng-click="activeItem = \'agility\' ; setActiveItem($event)"> <span class="badge" ng-bind="agility"></span> Agility </li> <li class="list-group-item" ng-class="{active: activeItem === \'craft\'}" ng-click="activeItem = \'craft\' ; setActiveItem($event)"> <span class="badge" ng-bind="craft"></span> Craft </li> <li class="list-group-item" ng-class="{active: activeItem === \'morale\'}" ng-click="activeItem = \'morale\' ; setActiveItem($event)"> <span class="badge" ng-bind="morale"></span> Morale </li> </ul> </div> <div id="attributeButton"> <div class="btn-group" role="group" aria-label="..."> <button type="button" class="btn btn-default" ng-click="addOne(activeItem)">+</button> <button type="button" class="btn btn-default" ng-click="subtractOne(activeItem)">-</button> </div> </div></div>')}]);